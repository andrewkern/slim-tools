{
  "functionName": "#### \ud83d\udfe1 `functionName`\n```slim\nfunctionName(params)\n```\n\ud83d\udd35 **Returns:** `ret-type`  \n\ud83d\udfe0 **Parameters:** `params`",
  "initializeAncestralNucleotides": "#### \ud83d\udfe1 `initializeAncestralNucleotides`\n```slim\ninitializeAncestralNucleotides(is sequence)\n```\n\ud83d\udd35 **Returns:** `integer$`  \n\ud83d\udfe0 **Parameters:** `is sequence`",
  "initializeGenomicElement": "#### \ud83d\udfe1 `initializeGenomicElement`\n```slim\ninitializeGenomicElement(io<GEType> genomicElementType, i start, i end)\n```\n\ud83d\udd35 **Returns:** `o<GElement>`  \n\ud83d\udfe0 **Parameters:** `io<GEType> genomicElementType, i start, i end`",
  "initializeHotspotMap": "#### \ud83d\udfe1 `initializeHotspotMap`\n```slim\ninitializeHotspotMap(numeric multipliers, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `numeric multipliers, [Ni ends], [s$ sex]`",
  "initializeMutationRate": "#### \ud83d\udfe1 `initializeMutationRate`\n```slim\ninitializeMutationRate(n rates, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n rates, [Ni ends], [s$ sex]`",
  "initializeMutationType": "#### \ud83d\udfe1 `initializeMutationType`\n```slim\ninitializeMutationType(is$ id, n$ dominanceCoeff, s$ distributionType, ...)\n```\n\ud83d\udd35 **Returns:** `o<MutType>$`  \n\ud83d\udfe0 **Parameters:** `is$ id, n$ dominanceCoeff, s$ distributionType, ...`",
  "initializeMutationTypeNuc": "#### \ud83d\udfe1 `initializeMutationTypeNuc`\n```slim\ninitializeMutationTypeNuc(is$ id, n$ dominanceCoeff, s$ distributType, ...)\n```\n\ud83d\udd35 **Returns:** `o<MutType>$`  \n\ud83d\udfe0 **Parameters:** `is$ id, n$ dominanceCoeff, s$ distributType, ...`",
  "initializeRecombinationRate": "#### \ud83d\udfe1 `initializeRecombinationRate`\n```slim\ninitializeRecombinationRate(n rates, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n rates, [Ni ends], [s$ sex]`",
  "initializeSex": "#### \ud83d\udfe1 `initializeSex`\n```slim\ninitializeSex(s$ chromosomeType)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ chromosomeType`",
  "initializeSLiMModelType": "#### \ud83d\udfe1 `initializeSLiMModelType`\n```slim\ninitializeSLiMModelType(s$ modelType)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ modelType`",
  "initializeSpecies": "#### \ud83d\udfe1 `initializeSpecies`\n```slim\ninitializeSpecies([i$ tickModulo], [i$ tickPhase], [s$ avatar], [s$ color])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[i$ tickModulo], [i$ tickPhase], [s$ avatar], [s$ color]`",
  "addSubpop": "#### \ud83d\udfe1 `addSubpop`\n```slim\naddSubpop(is$ subpopID, i$ size, [f$ sexRatio], [l$ haploid])\n```\n\ud83d\udd35 **Returns:** `o<Subpop>$`  \n\ud83d\udfe0 **Parameters:** `is$ subpopID, i$ size, [f$ sexRatio], [l$ haploid]`",
  "countOfMutationsOfType": "#### \ud83d\udfe1 `countOfMutationsOfType`\n```slim\ncountOfMutationsOfType(io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `i$`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType`",
  "individualsWithPedigreeIDs": "#### \ud83d\udfe1 `individualsWithPedigreeIDs`\n```slim\nindividualsWithPedigreeIDs(i pedigreeIDs, [Nio<Subpop> subpops])\n```\n\ud83d\udd35 **Returns:** `o<Ind>`  \n\ud83d\udfe0 **Parameters:** `i pedigreeIDs, [Nio<Subpop> subpops]`",
  "killIndividuals": "#### \ud83d\udfe1 `killIndividuals`\n```slim\nkillIndividuals(o<Individual> individuals)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<Individual> individuals`",
  "mutationCounts": "#### \ud83d\udfe1 `mutationCounts`\n```slim\nmutationCounts(Nio<Subpop> subpops, [No<Mut> mutations])\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `Nio<Subpop> subpops, [No<Mut> mutations]`",
  "mutationFrequencies": "#### \ud83d\udfe1 `mutationFrequencies`\n```slim\nmutationFrequencies(Nio<Subpop> subpops, [No<Mut> mutations])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `Nio<Subpop> subpops, [No<Mut> mutations]`",
  "mutationsOfType": "#### \ud83d\udfe1 `mutationsOfType`\n```slim\nmutationsOfType(io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `o<Mut>`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType`",
  "outputFixedMutations": "#### \ud83d\udfe1 `outputFixedMutations`\n```slim\noutputFixedMutations([Ns$ filePath], [l$ append])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ns$ filePath], [l$ append]`",
  "outputMutations": "#### \ud83d\udfe1 `outputMutations`\n```slim\noutputMutations(o<Mut> mutations, [Ns$ filePath], [l$ append])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<Mut> mutations, [Ns$ filePath], [l$ append]`",
  "readFromPopulationFile": "#### \ud83d\udfe1 `readFromPopulationFile`\n```slim\nreadFromPopulationFile(s$ filePath, [No$ subpopMap])\n```\n\ud83d\udd35 **Returns:** `i$`  \n\ud83d\udfe0 **Parameters:** `s$ filePath, [No$ subpopMap]`",
  "recalculateFitness": "#### \ud83d\udfe1 `recalculateFitness`\n```slim\nrecalculateFitness([Ni$ tick])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ni$ tick]`",
  "simulationFinished": "#### \ud83d\udfe1 `simulationFinished`\n```slim\nsimulationFinished(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "skipTick": "#### \ud83d\udfe1 `skipTick`\n```slim\nskipTick(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "treeSeqCoalesced": "#### \ud83d\udfe1 `treeSeqCoalesced`\n```slim\ntreeSeqCoalesced(void)\n```\n\ud83d\udd35 **Returns:** `l$`  \n\ud83d\udfe0 **Parameters:** `void`",
  "treeSeqOutput": "#### \ud83d\udfe1 `treeSeqOutput`\n```slim\ntreeSeqOutput(s$ path, [l$ simplify] , [l$ includeModel] , [No$ metadata])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ path, [l$ simplify] , [l$ includeModel] , [No$ metadata]`",
  "treeSeqRememberIndividuals": "#### \ud83d\udfe1 `treeSeqRememberIndividuals`\n```slim\ntreeSeqRememberIndividuals(o<Ind> individuals , [l$ permanent])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<Ind> individuals , [l$ permanent]`",
  "treeSeqSimplify": "#### \ud83d\udfe1 `treeSeqSimplify`\n```slim\ntreeSeqSimplify(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "setGenomicElementType": "#### \ud83d\udfe1 `setGenomicElementType`\n```slim\nsetGenomicElementType(io<GEType>$ genomicElementType)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<GEType>$ genomicElementType`",
  "addCloned": "#### \ud83d\udfe1 `addCloned`\n```slim\naddCloned(o<Ind>$ parent, [i$ count], [l$ defer])\n```\n\ud83d\udd35 **Returns:** `No<Ind>$`  \n\ud83d\udfe0 **Parameters:** `o<Ind>$ parent, [i$ count], [l$ defer]`",
  "addEmpty": "#### \ud83d\udfe1 `addEmpty`\n```slim\naddEmpty([Nfs$ sex], [Nl$ genome1Null], [Nl$ genome2Null], [i$ count])\n```\n\ud83d\udd35 **Returns:** `No<Ind>$`  \n\ud83d\udfe0 **Parameters:** `[Nfs$ sex], [Nl$ genome1Null], [Nl$ genome2Null], [i$ count]`",
  "addSelfed": "#### \ud83d\udfe1 `addSelfed`\n```slim\naddSelfed(o<Ind>$ parent, [i$ count], [l$ defer])\n```\n\ud83d\udd35 **Returns:** `No<Ind>$`  \n\ud83d\udfe0 **Parameters:** `o<Ind>$ parent, [i$ count], [l$ defer]`",
  "addSpatialMap": "#### \ud83d\udfe1 `addSpatialMap`\n```slim\naddSpatialMap(o<SpatialMap>$ map)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<SpatialMap>$ map`",
  "cachedFitness": "#### \ud83d\udfe1 `cachedFitness`\n```slim\ncachedFitness(Ni indices)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `Ni indices`",
  "configureDisplay": "#### \ud83d\udfe1 `configureDisplay`\n```slim\nconfigureDisplay([Nf center], [Nf$ scale], [Ns$ color])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Nf center], [Nf$ scale], [Ns$ color]`",
  "deviatePositions": "#### \ud83d\udfe1 `deviatePositions`\n```slim\ndeviatePositions(No<Ind> individuals, s$ boundary, f$ maxDistance, s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `No<Ind> individuals, s$ boundary, f$ maxDistance, s$ functionType, ...`",
  "pointDeviated": "#### \ud83d\udfe1 `pointDeviated`\n```slim\npointDeviated(i$ n, float point, s$ boundary, f$ maxDistance, s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `i$ n, float point, s$ boundary, f$ maxDistance, s$ functionType, ...`",
  "pointInBounds": "#### \ud83d\udfe1 `pointInBounds`\n```slim\npointInBounds(f point)\n```\n\ud83d\udd35 **Returns:** `l`  \n\ud83d\udfe0 **Parameters:** `f point`",
  "pointUniform": "#### \ud83d\udfe1 `pointUniform`\n```slim\npointUniform([i$ n])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `[i$ n]`",
  "removeSpatialMap": "#### \ud83d\udfe1 `removeSpatialMap`\n```slim\nremoveSpatialMap(so<SpatialMap>$ map)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `so<SpatialMap>$ map`",
  "removeSubpopulation": "#### \ud83d\udfe1 `removeSubpopulation`\n```slim\nremoveSubpopulation(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "setCloningRate": "#### \ud83d\udfe1 `setCloningRate`\n```slim\nsetCloningRate(n rate)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n rate`",
  "setMigrationRates": "#### \ud83d\udfe1 `setMigrationRates`\n```slim\nsetMigrationRates(io<Subpop> sourceSubpops, n rates)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<Subpop> sourceSubpops, n rates`",
  "setSelfingRate": "#### \ud83d\udfe1 `setSelfingRate`\n```slim\nsetSelfingRate(n$ rate)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n$ rate`",
  "setSexRatio": "#### \ud83d\udfe1 `setSexRatio`\n```slim\nsetSexRatio(f$ sexRatio)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `f$ sexRatio`",
  "setSpatialBounds": "#### \ud83d\udfe1 `setSpatialBounds`\n```slim\nsetSpatialBounds(n bounds)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n bounds`",
  "setSubpopulationSize": "#### \ud83d\udfe1 `setSubpopulationSize`\n```slim\nsetSubpopulationSize(i$ size)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `i$ size`",
  "spatialMapValue": "#### \ud83d\udfe1 `spatialMapValue`\n```slim\nspatialMapValue(so<SpatialMap>$ map, f point)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `so<SpatialMap>$ map, f point`",
  "takeMigrants": "#### \ud83d\udfe1 `takeMigrants`\n```slim\ntakeMigrants(o<Ind> migrants)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<Ind> migrants`",
  "setMutationType": "#### \ud83d\udfe1 `setMutationType`\n```slim\nsetMutationType(io<MutType>$\u00a0mutType)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$\u00a0mutType`",
  "setSelectionCoeff": "#### \ud83d\udfe1 `setSelectionCoeff`\n```slim\nsetSelectionCoeff(f$ selectionCoeff)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `f$ selectionCoeff`",
  "containsMutations": "#### \ud83d\udfe1 `containsMutations`\n```slim\ncontainsMutations(o<Mut> mutations)\n```\n\ud83d\udd35 **Returns:** `l`  \n\ud83d\udfe0 **Parameters:** `o<Mut> mutations`",
  "relatedness": "#### \ud83d\udfe1 `relatedness`\n```slim\nrelatedness(o<Ind> individuals)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind> individuals`",
  "setSpatialPosition": "#### \ud83d\udfe1 `setSpatialPosition`\n```slim\nsetSpatialPosition(f position)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `f position`",
  "sharedParentCount": "#### \ud83d\udfe1 `sharedParentCount`\n```slim\nsharedParentCount(o<Ind> individuals)\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `o<Ind> individuals`",
  "sumOfMutationsOfType": "#### \ud83d\udfe1 `sumOfMutationsOfType`\n```slim\nsumOfMutationsOfType(io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType`",
  "uniqueMutationsOfType": "#### \ud83d\udfe1 `uniqueMutationsOfType`\n```slim\nuniqueMutationsOfType(io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `o<Mut>`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType`",
  "drawSelectionCoefficient": "#### \ud83d\udfe1 `drawSelectionCoefficient`\n```slim\ndrawSelectionCoefficient(i$ n)\n```\n\ud83d\udd35 **Returns:** `float`  \n\ud83d\udfe0 **Parameters:** `i$ n`",
  "setDistribution": "#### \ud83d\udfe1 `setDistribution`\n```slim\nsetDistribution(s$ distType, ...)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ distType, ...`",
  "ancestralNucleotides": "#### \ud83d\udfe1 `ancestralNucleotides`\n```slim\nancestralNucleotides([Ni$ start], [Ni$ end], [s$ format])\n```\n\ud83d\udd35 **Returns:** `is`  \n\ud83d\udfe0 **Parameters:** `[Ni$ start], [Ni$ end], [s$ format]`",
  "drawBreakpoints": "#### \ud83d\udfe1 `drawBreakpoints`\n```slim\ndrawBreakpoints([No<Ind>$ parent], [Ni$ n])\n```\n\ud83d\udd35 **Returns:** `integer`  \n\ud83d\udfe0 **Parameters:** `[No<Ind>$ parent], [Ni$ n]`",
  "genomicElementForPosition": "#### \ud83d\udfe1 `genomicElementForPosition`\n```slim\ngenomicElementForPosition(i$ positions)\n```\n\ud83d\udd35 **Returns:** `o<GElement>`  \n\ud83d\udfe0 **Parameters:** `i$ positions`",
  "hasGenomicElementForPosition": "#### \ud83d\udfe1 `hasGenomicElementForPosition`\n```slim\nhasGenomicElementForPosition(i$ positions)\n```\n\ud83d\udd35 **Returns:** `logical`  \n\ud83d\udfe0 **Parameters:** `i$ positions`",
  "setAncestralNucleotides": "#### \ud83d\udfe1 `setAncestralNucleotides`\n```slim\nsetAncestralNucleotides(is sequence)\n```\n\ud83d\udd35 **Returns:** `integer$`  \n\ud83d\udfe0 **Parameters:** `is sequence`",
  "setHotspotMap": "#### \ud83d\udfe1 `setHotspotMap`\n```slim\nsetHotspotMap(n multipliers, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n multipliers, [Ni ends], [s$ sex]`",
  "setMutationRate": "#### \ud83d\udfe1 `setMutationRate`\n```slim\nsetMutationRate(n rates, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n rates, [Ni ends], [s$ sex]`",
  "setRecombinationRate": "#### \ud83d\udfe1 `setRecombinationRate`\n```slim\nsetRecombinationRate(n rates, [Ni ends], [s$ sex])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n rates, [Ni ends], [s$ sex]`",
  "addMutations": "#### \ud83d\udfe1 `addMutations`\n```slim\naddMutations(o<Mut> mutations)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `o<Mut> mutations`",
  "containsMarkerMutation": "#### \ud83d\udfe1 `containsMarkerMutation`\n```slim\ncontainsMarkerMutation(io<MutType>$ mutType, i$ position, [l$\u00a0returnMutation])\n```\n\ud83d\udd35 **Returns:** `l$`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType, i$ position, [l$\u00a0returnMutation]`",
  "mutationCountsInGenomes": "#### \ud83d\udfe1 `mutationCountsInGenomes`\n```slim\nmutationCountsInGenomes(No<Mut> mutations)\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `No<Mut> mutations`",
  "mutationFrequenciesInGenomes": "#### \ud83d\udfe1 `mutationFrequenciesInGenomes`\n```slim\nmutationFrequenciesInGenomes(No<Mut> mutations)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `No<Mut> mutations`",
  "nucleotides": "#### \ud83d\udfe1 `nucleotides`\n```slim\nnucleotides([Ni$ start], [Ni$ end], [s$ format])\n```\n\ud83d\udd35 **Returns:** `is`  \n\ud83d\udfe0 **Parameters:** `[Ni$ start], [Ni$ end], [s$ format]`",
  "output": "#### \ud83d\udfe1 `output`\n```slim\noutput([Ns$ filePath], [l$ append])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ns$ filePath], [l$ append]`",
  "outputMS": "#### \ud83d\udfe1 `outputMS`\n```slim\noutputMS([Ns$ filePath], [l$ append], [l$ filterMonomorphic])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ns$ filePath], [l$ append], [l$ filterMonomorphic]`",
  "outputVCF": "#### \ud83d\udfe1 `outputVCF`\n```slim\noutputVCF([Ns$ filePath], [l$ outputMultiallelics], [l$ append])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ns$ filePath], [l$ outputMultiallelics], [l$ append]`",
  "positionsOfMutationsOfType": "#### \ud83d\udfe1 `positionsOfMutationsOfType`\n```slim\npositionsOfMutationsOfType(io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `io<MutType>$ mutType`",
  "readFromMS": "#### \ud83d\udfe1 `readFromMS`\n```slim\nreadFromMS(s$ filePath, io<MutType>$ mutationType)\n```\n\ud83d\udd35 **Returns:** `o<Mut>`  \n\ud83d\udfe0 **Parameters:** `s$ filePath, io<MutType>$ mutationType`",
  "readFromVCF": "#### \ud83d\udfe1 `readFromVCF`\n```slim\nreadFromVCF(s$ filePath, [Nio<MutType>$ mutationType])\n```\n\ud83d\udd35 **Returns:** `o<Mut>`  \n\ud83d\udfe0 **Parameters:** `s$ filePath, [Nio<MutType>$ mutationType]`",
  "removeMutations": "#### \ud83d\udfe1 `removeMutations`\n```slim\nremoveMutations([No<Mut> mutations], [l$ substitute])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[No<Mut> mutations], [l$ substitute]`",
  "clippedIntegral": "#### \ud83d\udfe1 `clippedIntegral`\n```slim\nclippedIntegral(No<Ind> individuals)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `No<Ind> individuals`",
  "distance": "#### \ud83d\udfe1 `distance`\n```slim\ndistance(o<Ind>$ receiver, [No<Ind> exerters])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind>$ receiver, [No<Ind> exerters]`",
  "distanceFromPoint": "#### \ud83d\udfe1 `distanceFromPoint`\n```slim\ndistanceFromPoint(f point, o<Ind> exerters)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `f point, o<Ind> exerters`",
  "evaluate": "#### \ud83d\udfe1 `evaluate`\n```slim\nevaluate(io<Subpop> subpops)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<Subpop> subpops`",
  "interactingNeighborCount": "#### \ud83d\udfe1 `interactingNeighborCount`\n```slim\ninteractingNeighborCount(o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop])\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop]`",
  "interactionDistance": "#### \ud83d\udfe1 `interactionDistance`\n```slim\ninteractionDistance(o<Ind> receiver, [No<Ind> exerters])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind> receiver, [No<Ind> exerters]`",
  "localPopulationDensity": "#### \ud83d\udfe1 `localPopulationDensity`\n```slim\nlocalPopulationDensity(o<Ind> receivers, [No<Subpop>$ exerterSubpop])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind> receivers, [No<Subpop>$ exerterSubpop]`",
  "nearestNeighborsOfPoint": "#### \ud83d\udfe1 `nearestNeighborsOfPoint`\n```slim\nnearestNeighborsOfPoint(f point, io<Subpop>$ exerterSubpop, [i$ count])\n```\n\ud83d\udd35 **Returns:** `o<Ind>`  \n\ud83d\udfe0 **Parameters:** `f point, io<Subpop>$ exerterSubpop, [i$ count]`",
  "neighborCount": "#### \ud83d\udfe1 `neighborCount`\n```slim\nneighborCount(o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop])\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop]`",
  "neighborCountOfPoint": "#### \ud83d\udfe1 `neighborCountOfPoint`\n```slim\nneighborCountOfPoint(o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop])\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `o<Ind>\u00a0receivers, [No<Subpop>$ exerterSubpop]`",
  "setInteractionFunction": "#### \ud83d\udfe1 `setInteractionFunction`\n```slim\nsetInteractionFunction(s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ functionType, ...`",
  "strength": "#### \ud83d\udfe1 `strength`\n```slim\nstrength(o<Ind>$ receiver, [No<Ind> exerters])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind>$ receiver, [No<Ind> exerters]`",
  "testConstraints": "#### \ud83d\udfe1 `testConstraints`\n```slim\ntestConstraints(o<Ind> individuals, s$ constraints, [l$ returnIndividuals])\n```\n\ud83d\udd35 **Returns:** `lo<Ind>`  \n\ud83d\udfe0 **Parameters:** `o<Ind> individuals, s$ constraints, [l$ returnIndividuals]`",
  "totalOfNeighborStrengths": "#### \ud83d\udfe1 `totalOfNeighborStrengths`\n```slim\ntotalOfNeighborStrengths(o<Ind> receivers, [No<Subpop>$ exerterSubpop])\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `o<Ind> receivers, [No<Subpop>$ exerterSubpop]`",
  "unevaluate": "#### \ud83d\udfe1 `unevaluate`\n```slim\nunevaluate(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "setMutationFractions": "#### \ud83d\udfe1 `setMutationFractions`\n```slim\nsetMutationFractions(io<MutType> mutationTypes, n proportions)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<MutType> mutationTypes, n proportions`",
  "setMutationMatrix": "#### \ud83d\udfe1 `setMutationMatrix`\n```slim\nsetMutationMatrix(f mutationMatrix)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `f mutationMatrix`",
  "SpatialMap": "#### \ud83d\udfe1 `SpatialMap`\n```slim\nSpatialMap(s$ map, o<SpatialMap>$ map)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `s$ map, o<SpatialMap>$ map`",
  "add": "#### \ud83d\udfe1 `add`\n```slim\nadd(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "blend": "#### \ud83d\udfe1 `blend`\n```slim\nblend(ifo<SpatialMap> x, f$ xFraction)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x, f$ xFraction`",
  "changeValues": "#### \ud83d\udfe1 `changeValues`\n```slim\nchangeValues(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "divide": "#### \ud83d\udfe1 `divide`\n```slim\ndivide(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "exp": "#### \ud83d\udfe1 `exp`\n```slim\nexp(void)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `void`",
  "gridValues": "#### \ud83d\udfe1 `gridValues`\n```slim\ngridValues(void)\n```\n\ud83d\udd35 **Returns:** `float`  \n\ud83d\udfe0 **Parameters:** `void`",
  "interpolateValues": "#### \ud83d\udfe1 `interpolateValues`\n```slim\ninterpolateValues(i$ factor, [s$ method])\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `i$ factor, [s$ method]`",
  "mapColor": "#### \ud83d\udfe1 `mapColor`\n```slim\nmapColor(n value)\n```\n\ud83d\udd35 **Returns:** `s`  \n\ud83d\udfe0 **Parameters:** `n value`",
  "mapImage": "#### \ud83d\udfe1 `mapImage`\n```slim\nmapImage([Ni$ width], [Ni$ height], [l$ centers], [l$ color])\n```\n\ud83d\udd35 **Returns:** `o<Image>$`  \n\ud83d\udfe0 **Parameters:** `[Ni$ width], [Ni$ height], [l$ centers], [l$ color]`",
  "mapValue": "#### \ud83d\udfe1 `mapValue`\n```slim\nmapValue(f point)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `f point`",
  "multiply": "#### \ud83d\udfe1 `multiply`\n```slim\nmultiply(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "power": "#### \ud83d\udfe1 `power`\n```slim\npower(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "range": "#### \ud83d\udfe1 `range`\n```slim\nrange(void)\n```\n\ud83d\udd35 **Returns:** `float`  \n\ud83d\udfe0 **Parameters:** `void`",
  "sampleImprovedNearbyPoint": "#### \ud83d\udfe1 `sampleImprovedNearbyPoint`\n```slim\nsampleImprovedNearbyPoint(float point, f$ maxDistance, s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `float`  \n\ud83d\udfe0 **Parameters:** `float point, f$ maxDistance, s$ functionType, ...`",
  "sampleNearbyPoint": "#### \ud83d\udfe1 `sampleNearbyPoint`\n```slim\nsampleNearbyPoint(float point, f$ maxDistance, s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `float`  \n\ud83d\udfe0 **Parameters:** `float point, f$ maxDistance, s$ functionType, ...`",
  "smooth": "#### \ud83d\udfe1 `smooth`\n```slim\nsmooth(float$ maxDistance, s$ functionType, ...)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `float$ maxDistance, s$ functionType, ...`",
  "subtract": "#### \ud83d\udfe1 `subtract`\n```slim\nsubtract(ifo<SpatialMap> x)\n```\n\ud83d\udd35 **Returns:** `o<SpatialMap>$`  \n\ud83d\udfe0 **Parameters:** `ifo<SpatialMap> x`",
  "addCustomColumn": "#### \ud83d\udfe1 `addCustomColumn`\n```slim\naddCustomColumn(s$ columnName, s$ source, [* context])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ columnName, s$ source, [* context]`",
  "addCycle": "#### \ud83d\udfe1 `addCycle`\n```slim\naddCycle(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "addCycleStage": "#### \ud83d\udfe1 `addCycleStage`\n```slim\naddCycleStage(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "addMeanSDColumns": "#### \ud83d\udfe1 `addMeanSDColumns`\n```slim\naddMeanSDColumns(s$ columnName, s$ source, [* context])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ columnName, s$ source, [* context]`",
  "addPopulationSexRatio": "#### \ud83d\udfe1 `addPopulationSexRatio`\n```slim\naddPopulationSexRatio(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "addPopulationSize": "#### \ud83d\udfe1 `addPopulationSize`\n```slim\naddPopulationSize(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "addSubpopulationSexRatio": "#### \ud83d\udfe1 `addSubpopulationSexRatio`\n```slim\naddSubpopulationSexRatio(io<Subpop>$ subpop)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<Subpop>$ subpop`",
  "addSubpopulationSize": "#### \ud83d\udfe1 `addSubpopulationSize`\n```slim\naddSubpopulationSize(io<Subpop>$ subpop)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<Subpop>$ subpop`",
  "addSuppliedColumn": "#### \ud83d\udfe1 `addSuppliedColumn`\n```slim\naddSuppliedColumn(s$ columnName)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ columnName`",
  "flush": "#### \ud83d\udfe1 `flush`\n```slim\nflush(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "logRow": "#### \ud83d\udfe1 `logRow`\n```slim\nlogRow(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "setFilePath": "#### \ud83d\udfe1 `setFilePath`\n```slim\nsetFilePath(s$ filePath, [Ns initialContents], [l$ append], [Nl$ compress], [Ns$ sep])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ filePath, [Ns initialContents], [l$ append], [Nl$ compress], [Ns$ sep]`",
  "setLogInterval": "#### \ud83d\udfe1 `setLogInterval`\n```slim\nsetLogInterval([Ni$ logInterval])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Ni$ logInterval]`",
  "setSuppliedValue": "#### \ud83d\udfe1 `setSuppliedValue`\n```slim\nsetSuppliedValue(s$ columnName, +$ value)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ columnName, +$ value`",
  "willAutolog": "#### \ud83d\udfe1 `willAutolog`\n```slim\nwillAutolog(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "estimatedLastTick": "#### \ud83d\udfe1 `estimatedLastTick`\n```slim\nestimatedLastTick(void)\n```\n\ud83d\udd35 **Returns:** `i$`  \n\ud83d\udfe0 **Parameters:** `void`",
  "deregisterScriptBlock": "#### \ud83d\udfe1 `deregisterScriptBlock`\n```slim\nderegisterScriptBlock(io<SEBlock> scriptBlocks)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `io<SEBlock> scriptBlocks`",
  "genomicElementTypesWithIDs": "#### \ud83d\udfe1 `genomicElementTypesWithIDs`\n```slim\ngenomicElementTypesWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<GEType>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "interactionTypesWithIDs": "#### \ud83d\udfe1 `interactionTypesWithIDs`\n```slim\ninteractionTypesWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<IntType>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "mutationTypesWithIDs": "#### \ud83d\udfe1 `mutationTypesWithIDs`\n```slim\nmutationTypesWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<MutType>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "outputUsage": "#### \ud83d\udfe1 `outputUsage`\n```slim\noutputUsage(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "scriptBlocksWithIDs": "#### \ud83d\udfe1 `scriptBlocksWithIDs`\n```slim\nscriptBlocksWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<SEBlock>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "speciesWithIDs": "#### \ud83d\udfe1 `speciesWithIDs`\n```slim\nspeciesWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<Species>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "subpopulationsWithIDs": "#### \ud83d\udfe1 `subpopulationsWithIDs`\n```slim\nsubpopulationsWithIDs(i ids)\n```\n\ud83d\udd35 **Returns:** `o<Subpop>`  \n\ud83d\udfe0 **Parameters:** `i ids`",
  "subpopulationsWithNames": "#### \ud83d\udfe1 `subpopulationsWithNames`\n```slim\nsubpopulationsWithNames(s names)\n```\n\ud83d\udd35 **Returns:** `o<Subpop>`  \n\ud83d\udfe0 **Parameters:** `s names`",
  "usage": "#### \ud83d\udfe1 `usage`\n```slim\nusage(void)\n```\n\ud83d\udd35 **Returns:** `float$`  \n\ud83d\udfe0 **Parameters:** `void`",
  "calcFST": "#### \ud83d\udfe1 `calcFST`\n```slim\ncalcFST(o<Genome> genomes1, o<Genome> genomes2, [No<Mut> muts], [Ni$ start], [Ni$ end])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes1, o<Genome> genomes2, [No<Mut> muts], [Ni$ start], [Ni$ end]`",
  "calcHeterozygosity": "#### \ud83d\udfe1 `calcHeterozygosity`\n```slim\ncalcHeterozygosity(o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end]`",
  "calcInbreedingLoad": "#### \ud83d\udfe1 `calcInbreedingLoad`\n```slim\ncalcInbreedingLoad(o<Genome> genomes, [No<MutType> mutType])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes, [No<MutType> mutType]`",
  "calcPi": "#### \ud83d\udfe1 `calcPi`\n```slim\ncalcPi(o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end]`",
  "calcTajimasD": "#### \ud83d\udfe1 `calcTajimasD`\n```slim\ncalcTajimasD(o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end]`",
  "calcVA": "#### \ud83d\udfe1 `calcVA`\n```slim\ncalcVA(o<Ind> individuals, io<MutType>$ mutType)\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Ind> individuals, io<MutType>$ mutType`",
  "calcWattersonsTheta": "#### \ud83d\udfe1 `calcWattersonsTheta`\n```slim\ncalcWattersonsTheta(o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end])\n```\n\ud83d\udd35 **Returns:** `f$`  \n\ud83d\udfe0 **Parameters:** `o<Genome> genomes, [No<Mut> muts], [Ni$ start], [Ni$ end]`",
  "codonsToAminoAcids": "#### \ud83d\udfe1 `codonsToAminoAcids`\n```slim\ncodonsToAminoAcids(i codons, [li$ long], [l$ paste])\n```\n\ud83d\udd35 **Returns:** `s`  \n\ud83d\udfe0 **Parameters:** `i codons, [li$ long], [l$ paste]`",
  "codonsToNucleotides": "#### \ud83d\udfe1 `codonsToNucleotides`\n```slim\ncodonsToNucleotides(i codons, [s$ format])\n```\n\ud83d\udd35 **Returns:** `is`  \n\ud83d\udfe0 **Parameters:** `i codons, [s$ format]`",
  "mm16To256": "#### \ud83d\udfe1 `mm16To256`\n```slim\nmm16To256(f mutationMatrix)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `f mutationMatrix`",
  "mmJukesCantor": "#### \ud83d\udfe1 `mmJukesCantor`\n```slim\nmmJukesCantor(f$ alpha)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `f$ alpha`",
  "mmKimura": "#### \ud83d\udfe1 `mmKimura`\n```slim\nmmKimura(f$ alpha, f$ beta)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `f$ alpha, f$ beta`",
  "nucleotideCounts": "#### \ud83d\udfe1 `nucleotideCounts`\n```slim\nnucleotideCounts(is sequence)\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `is sequence`",
  "nucleotideFrequencies": "#### \ud83d\udfe1 `nucleotideFrequencies`\n```slim\nnucleotideFrequencies(is\u00a0sequence)\n```\n\ud83d\udd35 **Returns:** `f`  \n\ud83d\udfe0 **Parameters:** `is\u00a0sequence`",
  "nucleotidesToCodons": "#### \ud83d\udfe1 `nucleotidesToCodons`\n```slim\nnucleotidesToCodons(is sequence)\n```\n\ud83d\udd35 **Returns:** `i`  \n\ud83d\udfe0 **Parameters:** `is sequence`",
  "randomNucleotides": "#### \ud83d\udfe1 `randomNucleotides`\n```slim\nrandomNucleotides(i$ length, [Nif basis], [s$ format])\n```\n\ud83d\udd35 **Returns:** `is`  \n\ud83d\udfe0 **Parameters:** `i$ length, [Nif basis], [s$ format]`",
  "treeSeqMetadata": "#### \ud83d\udfe1 `treeSeqMetadata`\n```slim\ntreeSeqMetadata(s$ filePath, [l$ userData])\n```\n\ud83d\udd35 **Returns:** `o<Dictionary>`  \n\ud83d\udfe0 **Parameters:** `s$ filePath, [l$ userData]`",
  "openDocument": "#### \ud83d\udfe1 `openDocument`\n```slim\nopenDocument(s$ filePath)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$ filePath`",
  "logFileData": "#### \ud83d\udfe1 `logFileData`\n```slim\nlogFileData(o<LogFile>$\u00a0logFile, is$\u00a0column)\n```\n\ud83d\udd35 **Returns:** `Nfs`  \n\ud83d\udfe0 **Parameters:** `o<LogFile>$\u00a0logFile, is$\u00a0column`",
  "pauseExecution": "#### \ud83d\udfe1 `pauseExecution`\n```slim\npauseExecution(void)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `void`",
  "plotWithTitle": "#### \ud83d\udfe1 `plotWithTitle`\n```slim\nplotWithTitle(s$\u00a0title)\n```\n\ud83d\udd35 **Returns:** `No<Plot>$`  \n\ud83d\udfe0 **Parameters:** `s$\u00a0title`",
  "abline": "#### \ud83d\udfe1 `abline`\n```slim\nabline([Nif\u00a0a], [Nif\u00a0b], [Nif\u00a0h], [Nif\u00a0v], [string\u00a0color], [numeric\u00a0lwd])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `[Nif\u00a0a], [Nif\u00a0b], [Nif\u00a0h], [Nif\u00a0v], [string\u00a0color], [numeric\u00a0lwd]`",
  "axis": "#### \ud83d\udfe1 `axis`\n```slim\naxis(i$\u00a0side, [Nif\u00a0at], [ls\u00a0labels])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `i$\u00a0side, [Nif\u00a0at], [ls\u00a0labels]`",
  "legendLineEntry": "#### \ud83d\udfe1 `legendLineEntry`\n```slim\nlegendLineEntry(s$\u00a0label, [s$\u00a0color], [n$\u00a0lwd])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$\u00a0label, [s$\u00a0color], [n$\u00a0lwd]`",
  "legendPointEntry": "#### \ud83d\udfe1 `legendPointEntry`\n```slim\nlegendPointEntry(s$\u00a0label, [i$\u00a0symbol], [s$\u00a0color], [s$\u00a0border], [n$\u00a0lwd], [n$\u00a0size])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$\u00a0label, [i$\u00a0symbol], [s$\u00a0color], [s$\u00a0border], [n$\u00a0lwd], [n$\u00a0size]`",
  "legendSwatchEntry": "#### \ud83d\udfe1 `legendSwatchEntry`\n```slim\nlegendSwatchEntry(s$\u00a0label, [s$\u00a0color])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$\u00a0label, [s$\u00a0color]`",
  "lines": "#### \ud83d\udfe1 `lines`\n```slim\nlines(n\u00a0x, n\u00a0y, [s$\u00a0color], [n$\u00a0lwd])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n\u00a0x, n\u00a0y, [s$\u00a0color], [n$\u00a0lwd]`",
  "points": "#### \ud83d\udfe1 `points`\n```slim\npoints(n\u00a0x, n\u00a0y, [i\u00a0symbol], [s\u00a0color], [s\u00a0border], [n\u00a0lwd], [n\u00a0size])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n\u00a0x, n\u00a0y, [i\u00a0symbol], [s\u00a0color], [s\u00a0border], [n\u00a0lwd], [n\u00a0size]`",
  "text": "#### \ud83d\udfe1 `text`\n```slim\ntext(n\u00a0x, n\u00a0y, s\u00a0labels, [s\u00a0color], [n\u00a0size], [Nif\u00a0adj])\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `n\u00a0x, n\u00a0y, s\u00a0labels, [s\u00a0color], [n\u00a0size], [Nif\u00a0adj]`",
  "write": "#### \ud83d\udfe1 `write`\n```slim\nwrite(s$\u00a0filePath)\n```\n\ud83d\udd35 **Returns:** `void`  \n\ud83d\udfe0 **Parameters:** `s$\u00a0filePath`"
}